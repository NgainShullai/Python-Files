```python
# Demonstration of the data analytics pipeline using this project on the top 100 US companies by revenue in 2023  
# with a brief example:

# Data Collection Example: Data Source: A dataset from a reputable source.

import pandas as pd

# CSV file
file_path = 'D:/documents all/my_own_selected_projects/python_kagle/webscrape.csv'
data = pd.read_csv(file_path)

# Display 
data.head()

```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Rank</th>
      <th>Name</th>
      <th>Industry</th>
      <th>Revenue (USD millions)</th>
      <th>Revenue growth</th>
      <th>Employees</th>
      <th>Headquarters</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Walmart</td>
      <td>Retail</td>
      <td>611,289</td>
      <td>6.7%</td>
      <td>2,100,000</td>
      <td>Bentonville, Arkansas</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Amazon</td>
      <td>Retail and Cloud Computing</td>
      <td>513,983</td>
      <td>9.4%</td>
      <td>1,540,000</td>
      <td>Seattle, Washington</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Exxon Mobil</td>
      <td>Petroleum industry</td>
      <td>413,680</td>
      <td>44.8%</td>
      <td>62,000</td>
      <td>Spring, Texas</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Apple</td>
      <td>Electronics industry</td>
      <td>394,328</td>
      <td>7.8%</td>
      <td>164,000</td>
      <td>Cupertino, California</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>UnitedHealth Group</td>
      <td>Healthcare</td>
      <td>324,162</td>
      <td>12.7%</td>
      <td>400,000</td>
      <td>Minnetonka, Minnesota</td>
    </tr>
  </tbody>
</table>
</div>




```python
# Data Cleaning, Handle missing values, Remove duplicates, Standardize data formats.
```


```python
# missing values
missing_values = data.isnull().sum()
```


```python
# 'Revenue (USD millions)' to numeric, removing any commas
data['Revenue (USD millions)'] = data['Revenue (USD millions)'].str.replace(',', '').astype(float)
```


```python
# 'Revenue growth' to numeric, removing the percentage sign
data['Revenue growth'] = data['Revenue growth'].str.replace('%', '').astype(float)
```


```python
# Data Transformation: Calculate additional metrics such as revenue growth. Normalize data for comparison.
```


```python
missing_values, data.info()
```

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 100 entries, 0 to 99
    Data columns (total 7 columns):
     #   Column                  Non-Null Count  Dtype  
    ---  ------                  --------------  -----  
     0   Rank                    100 non-null    int64  
     1   Name                    100 non-null    object 
     2   Industry                100 non-null    object 
     3   Revenue (USD millions)  100 non-null    float64
     4   Revenue growth          100 non-null    float64
     5   Employees               100 non-null    object 
     6   Headquarters            100 non-null    object 
    dtypes: float64(2), int64(1), object(4)
    memory usage: 5.6+ KB
    




    (Rank                      0
     Name                      0
     Industry                  0
     Revenue (USD millions)    0
     Revenue growth            0
     Employees                 0
     Headquarters              0
     dtype: int64,
     None)




```python
#  'Employees' to numeric and removing any commas
data['Employees'] = data['Employees'].str.replace(',', '').astype(int)
```


```python
# statistics for numerical columns
summary_statistics = data.describe()
```


```python
# unique values and counts - categorical columns
unique_values = {col: data[col].nunique() for col in data.select_dtypes(include='object').columns}
```


```python
# Display 
summary_statistics, unique_values
```




    (             Rank  Revenue (USD millions)  Revenue growth     Employees
     count  100.000000              100.000000      100.000000  1.000000e+02
     mean    50.500000           117566.460000       19.576000  1.680631e+05
     std     29.011492           100915.112163       21.463397  2.717289e+05
     min      1.000000            44200.000000        0.500000  3.605000e+03
     25%     25.750000            57876.000000        4.375000  4.471150e+04
     50%     50.500000            80824.500000       11.700000  8.963850e+04
     75%     75.250000           138763.000000       23.625000  1.965125e+05
     max    100.000000           611289.000000       97.200000  2.100000e+06,
     {'Name': 100, 'Industry': 38, 'Headquarters': 76})




```python
# Visualization Using libraries like Matplotlib or Seaborn. Plot revenue distributions, growth trends, and comparisons among companies.
```


```python
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")

fig, axs = plt.subplots(3, 1, figsize=(10, 18))

sns.histplot(data['Revenue (USD millions)'], bins=20, kde=True, ax=axs[0])
axs[0].set_title('Distribution of Revenue (USD millions)')
axs[0].set_xlabel('Revenue (USD millions)')
axs[0].set_ylabel('Frequency')

sns.histplot(data['Revenue growth'], bins=20, kde=True, ax=axs[1])
axs[1].set_title('Distribution of Revenue Growth (%)')
axs[1].set_xlabel('Revenue Growth (%)')
axs[1].set_ylabel('Frequency')

sns.histplot(data['Employees'], bins=20, kde=True, ax=axs[2])
axs[2].set_title('Distribution of Number of Employees')
axs[2].set_xlabel('Number of Employees')
axs[2].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

```

    d:\Users\Win\anaconda3\Lib\site-packages\seaborn\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
      with pd.option_context('mode.use_inf_as_na', True):
    d:\Users\Win\anaconda3\Lib\site-packages\seaborn\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
      with pd.option_context('mode.use_inf_as_na', True):
    d:\Users\Win\anaconda3\Lib\site-packages\seaborn\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
      with pd.option_context('mode.use_inf_as_na', True):
    


    
![png](output_12_1.png)
    



```python
plt.figure(figsize=(12, 8))
sns.countplot(y='Industry', data=data, order=data['Industry'].value_counts().index)
plt.title('Distribution of Companies by Industry')
plt.xlabel('Number of Companies')
plt.ylabel('Industry')
plt.show()

```


    
![png](output_13_0.png)
    



```python
plt.figure(figsize=(12, 8))
sns.countplot(y='Headquarters', data=data, order=data['Headquarters'].value_counts().index[:10])  # Top 10 locations
plt.title('Distribution of Companies by Headquarters Location')
plt.xlabel('Number of Companies')
plt.ylabel('Headquarters')
plt.show()
```


    
![png](output_14_0.png)
    



```python
sns.pairplot(data[['Revenue (USD millions)', 'Revenue growth', 'Employees']])
plt.show()

```

    d:\Users\Win\anaconda3\Lib\site-packages\seaborn\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
      with pd.option_context('mode.use_inf_as_na', True):
    d:\Users\Win\anaconda3\Lib\site-packages\seaborn\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
      with pd.option_context('mode.use_inf_as_na', True):
    d:\Users\Win\anaconda3\Lib\site-packages\seaborn\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
      with pd.option_context('mode.use_inf_as_na', True):
    


    
![png](output_15_1.png)
    



```python
correlation_matrix = data[['Revenue (USD millions)', 'Revenue growth', 'Employees']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()
```


    
![png](output_16_0.png)
    



```python

```
